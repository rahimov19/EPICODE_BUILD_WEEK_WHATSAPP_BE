openapi: 3.0.1
info:
  title: Whatsapp Clone @ Strive School
  description: This is the descriptor for a Whatsapp Clone.
  contact:
    email: hello@luisanton.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: http://localhost:3001/
- url: https://my-whatsapp-clone.herokuapp.com/
tags:
- name: users
  description: Operations about users
- name: chats
  description: Operations about chats

paths:
  
  /users:
    get:
      tags:
      - "users"
      description: "Search users by username or email."
      security:
        - accessToken: []
      parameters:
      - in: "query"
        name: "q"
        description: "Query for username"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Search results"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
              
  /users/me:
      
    get:
      tags:
      - "users"
      description: "Returns your user data"
      security:
        - accessToken: []
      responses:
        "200":
          description: "User data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Not logged in"
        "404":
          description: "User not found"
          
    put:
      tags:
      - "users"
      description: "Changes your user data"
      security:
        - accessToken: []
      responses:
        "204":
          description: "successful operation"
        "401":
          description: "Not logged in"
        "404":
          description: "User not found"
          
  /users/me/avatar:
    post:
      tags:
      - "users"
      description: "Changes profile avatar"
      security:
        - accessToken: []
      requestBody:
        description: "New profile avatar"
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: "string"
                  format: "binary"
      responses:
        "204":
          description: "Success."

  /users/{id}:
    get:
      tags:
      - "users"
      description: "Returns a single user"
      security:
        - accessToken: []
      parameters:
      - name: "id"
        in: "path"
        description: "ID of user to return"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "User not found"
          
  
  /users/account:
    post:
      tags:
      - "users"
      description: "Registration"
      requestBody:
        description: "User registration data"
        content:
          application/json:
            schema:
              type: "object"
              properties:
                username:
                  type: "string"
                email:
                  type: "string"
                password:
                  type: "string"
      responses:
        "201":
          description: "Created. EXTRA: instead than returning tokens in the response body, handle them using cookies."
          content: 
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                  accessToken: 
                    type: "string"
                  refreshToken:
                    type: "string"
          
          
  /users/session:
    post:
      tags:
      - "users"
      description: "Login"
      requestBody:
        description: "User credentials"
        content:
          application/json:
            schema:
              type: "object"
              properties:
                email:
                  type: "string"
                password:
                  type: "string"
      responses:
        "200":
          description: "Logged in. EXTRA: instead than returning tokens in the response body, handle them using cookies."
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: 
                    type: "string"
                  refreshToken:
                    type: "string"
    delete:
      tags:
      - "users"
      description: "Logout. If implemented with cookies, should set an empty cookie. Otherwise it should just remove the refresh token from the DB."
      security: 
      - accessToken: []
      responses:
        "204":
          description: "success"
          
  /users/session/refresh:
    post:
      tags:
      - "users"
      description: "Refresh session"
      security:
        - refreshToken: []
      responses:
        "200":
          description: "Refreshed. EXTRA: instead than returning tokens in the response body, handle them using cookies."
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: 
                    type: "string"
                  refreshToken:
                    type: "string"
          
  /chats:
    get:
      tags:
      - "chats"
      description: "Returns all chats in which you are a member. Chat history doesn't get provided with this endpoint or the body payload would quickly become excessive."
      security:
        - accessToken: []
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
                  properties: 
                    _id: 
                      type: "string"
                    members:
                      type: "array"
                      items:
                        type: "string"
        "401":
          description: "Unauthorized"
          
    post:
      tags:
      - "chats"
      description: "This endpoint should check if the *request sender* already had an active chat with this recipient and return it if present. \n\n**Otherwise,** it creates a **new** chat among the request sender and the recipient the request body. When this happens, **on the socket layer**, this endpoint should also make sure that *the sockets of both users are joining this newly created room* (otherwise none of them would be listening to incoming messages to this room)."
      requestBody:
        description: "Members with which start a chat"
        content:
          application/json:
            schema:
              type: "object"
              properties:
                recipient:
                  type: "string"
      responses:
        "200":
          description: "Returning a previously existing chat"
        "201":
          description: "Created a new chat"
          
              
  /chats/{id}:
    get:
      tags:
      - "chats"
      description: "Returns full message history for a specific chat"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Message"
            
  
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: "string"
        username:
          type: "string"
        email:
          type: "string"
        avatar:
          type: "string"
    Message:
      type: "object"
      properties:
        _id:
          type: "string"
        timestamp:
          type: "integer"
          format: "int32"
        sender:
          type: "string"
        content:
          type: "object"
          properties:
            text:
              type: "string"
            media:
              type: "string"
    Chat:
      type: "object"
      properties:
        _id:
          type: "string"
        members:
          type: "array"
          items:
            $ref: '#/components/schemas/User'
        messages:
          type: "array"
          items:
            $ref: '#/components/schemas/Message'

  securitySchemes:
    accessToken:            
      type: http
      scheme: bearer
      bearerFormat: JWT    
    refreshToken:
      type: http
      scheme: bearer
      bearerFormat: JWT    